enum TokenType
{
    NUMBER,
    NAMING,

    OPEN_BRACE,
    CLOSE_BRACE,

    OPEN_BRACKET,
    CLOSE_BRACKET,

    DECLALATOR,
    ASSIGNMENT,

    COND_IF,
    COND_ELSE,

    LOOP_WHILE,

    RETURN,

    MATH_EQUAL,
    MATH_LESS,
    MATH_GREATER,
    MATH_EQUAL_LESS,
    MATH_EQUAL_GREATER,
    MATH_PLUS,
    MATH_MINUS,
    MATH_MUL,
    MATH_DIV,

    PRINT,
    SCAN,

    COMMA,
    SEMICOLON,
    
    AMOUNT_LEXEMES,
};

Node* Distributer(Node* node, TokenArray* tokens, size_t* pos)
{   
    if (*pos >= tokens->size) return nullptr;

    switch (getTokenType(tokens, pos))
    {
        case COMMA:
            break;
        
        case SEMICOLON:
            break;

        case OPEN_BRACE:
            break;
        
        case CLOSE_BRACE:
            break;

        case OPEN_BRACKET:
            break;

        case CLOSE_BRACKET:
            break;

        case DECLARATOR:
            break;

        case ASSIGNMENT:
            break;

        case COND_IF:
            break;

        case COND_ELSE:
            break;

        case LOOP_WHILE:
            break;

        case RETURN:
            break;

        case PRINT:
            break;

        case SCAN:
            break;

        case NUMBER:
            break;

        case NAMING:
            break;

        default:
            if (getTokenType(tokens, pos) >= MATH_EQUAL &&
                getTokenType(tokens, pos) <= MATH_DIV)
            {
                return nullptr;
            }
            else return nullptr;
    }
    return nullptr;
}
